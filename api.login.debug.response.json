---in controller debugLogin---
in sendLogin req:  <ref *2> IncomingMessage {
  _events: {
    close: undefined,
    error: undefined,
    data: undefined,
    end: undefined,
    readable: undefined,
    aborted: undefined
  },
  _readableState: ReadableState {
    highWaterMark: 65536,
    buffer: [],
    bufferIndex: 0,
    length: 0,
    pipes: [],
    awaitDrainWriters: null,
    Symbol(kState): 60294924
  },
  _maxListeners: undefined,
  socket: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 65536,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 65536,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17564420,
      Symbol(kBufferedValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 65536,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 9,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30347,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 11,
        Symbol(triggerId): 10,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 65536,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 9,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30347,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 11,
        Symbol(triggerId): 10,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      formatView: [Function (anonymous)],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Circular *1],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 65536,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    Symbol(async_id_symbol): 13,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *1]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): null,
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  httpVersionMajor: 1,
  httpVersionMinor: 0,
  httpVersion: '1.0',
  complete: true,
  rawHeaders: [
    'Host',              'api.amelieroussin.ca',
    'X-Real-IP',         '172.18.0.1',
    'X-Forwarded-For',   '172.18.0.1',
    'X-forwarded-Proto', 'https',
    'Connection',        'close',
    'Content-Length',    '50',
    'Content-Type',      'application/json',
    'User-Agent',        'insomnium/0.2.3-a',
    'Accept',            'application/json'
  ],
  rawTrailers: [],
  joinDuplicateHeaders: null,
  aborted: false,
  upgrade: false,
  url: '/debug',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client: <ref *1> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 65536,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 65536,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17564420,
      Symbol(kBufferedValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 65536,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 9,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30347,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 11,
        Symbol(triggerId): 10,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 65536,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 9,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30347,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 11,
        Symbol(triggerId): 10,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *1],
      incoming: [Circular *2],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: ServerResponse {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: false,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: true,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: false,
      _closed: false,
      _header: null,
      _keepAliveTimeout: 5000,
      _onPendingData: [Function: bound updateOutgoingData],
      req: [Circular *2],
      _sent100: false,
      _expect_continue: false,
      _maxRequestsPerSocket: 0,
      locals: [Object: null prototype] {},
      formatView: [Function (anonymous)],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): [Circular *1],
      Symbol(kOutHeaders): [Object: null prototype],
      Symbol(errored): null,
      Symbol(kHighWaterMark): 65536,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    Symbol(async_id_symbol): 13,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *1]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): null,
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  _consuming: true,
  _dumped: false,
  res: <ref *3> ServerResponse {
    _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
    _eventsCount: 1,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    destroyed: false,
    _last: false,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    maxRequestsOnConnectionReached: false,
    _defaultKeepAlive: true,
    useChunkedEncodingByDefault: false,
    sendDate: true,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    strictContentLength: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: false,
    _headerSent: false,
    _closed: false,
    _header: null,
    _keepAliveTimeout: 5000,
    _onPendingData: [Function: bound updateOutgoingData],
    req: [Circular *2],
    _sent100: false,
    _expect_continue: false,
    _maxRequestsPerSocket: 0,
    locals: [Object: null prototype] {},
    formatView: [Function (anonymous)],
    Symbol(shapeMode): false,
    Symbol(kCapture): false,
    Symbol(kBytesWritten): 0,
    Symbol(kNeedDrain): false,
    Symbol(corked): 0,
    Symbol(kChunkedBuffer): [],
    Symbol(kChunkedLength): 0,
    Symbol(kSocket): <ref *1> Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *3],
      Symbol(async_id_symbol): 13,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    Symbol(kOutHeaders): [Object: null prototype] { 'x-powered-by': [Array], vary: [Array] },
    Symbol(errored): null,
    Symbol(kHighWaterMark): 65536,
    Symbol(kRejectNonStandardBodyWrites): false,
    Symbol(kUniqueHeaders): null
  },
  next: [Function: next],
  baseUrl: '/login',
  originalUrl: '/login/debug',
  _parsedUrl: Url {
    protocol: null,
    slashes: null,
    auth: null,
    host: null,
    port: null,
    hostname: null,
    hash: null,
    search: null,
    query: null,
    pathname: '/debug',
    path: '/debug',
    href: '/debug',
    _raw: '/debug'
  },
  params: [Object: null prototype] {},
  body: { email: 'ft@m.local', password: 'saltypass' },
  length: undefined,
  _eventsCount: 0,
  route: Route {
    path: '/debug',
    stack: [ [Layer] ],
    methods: [Object: null prototype] { post: true }
  },
  Symbol(shapeMode): true,
  Symbol(kCapture): false,
  Symbol(kHeaders): {
    host: 'api.amelieroussin.ca',
    'x-real-ip': '172.18.0.1',
    'x-forwarded-for': '172.18.0.1',
    'x-forwarded-proto': 'https',
    connection: 'close',
    'content-length': '50',
    'content-type': 'application/json',
    'user-agent': 'insomnium/0.2.3-a',
    accept: 'application/json'
  },
  Symbol(kHeadersCount): 18,
  Symbol(kTrailers): null,
  Symbol(kTrailersCount): 0
}
in sendLogin res:  <ref *1> ServerResponse {
  _events: [Object: null prototype] { finish: [Function: bound resOnFinish] },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  destroyed: false,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: false,
  maxRequestsOnConnectionReached: false,
  _defaultKeepAlive: true,
  useChunkedEncodingByDefault: false,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  strictContentLength: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  _closed: false,
  _header: null,
  _keepAliveTimeout: 5000,
  _onPendingData: [Function: bound updateOutgoingData],
  req: IncomingMessage {
    _events: {
      close: undefined,
      error: undefined,
      data: undefined,
      end: undefined,
      readable: undefined,
      aborted: undefined
    },
    _readableState: ReadableState {
      highWaterMark: 65536,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 60294924
    },
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *1],
      Symbol(async_id_symbol): 13,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 0,
    httpVersion: '1.0',
    complete: true,
    rawHeaders: [
      'Host',              'api.amelieroussin.ca',
      'X-Real-IP',         '172.18.0.1',
      'X-Forwarded-For',   '172.18.0.1',
      'X-forwarded-Proto', 'https',
      'Connection',        'close',
      'Content-Length',    '50',
      'Content-Type',      'application/json',
      'User-Agent',        'insomnium/0.2.3-a',
      'Accept',            'application/json'
    ],
    rawTrailers: [],
    joinDuplicateHeaders: null,
    aborted: false,
    upgrade: false,
    url: '/debug',
    method: 'POST',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _closeAfterHandlingError: false,
      _events: [Object],
      _readableState: [ReadableState],
      _writableState: [WritableState],
      allowHalfOpen: true,
      _maxListeners: undefined,
      _eventsCount: 8,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      setEncoding: [Function: socketSetEncoding],
      _paused: false,
      _httpMessage: [Circular *1],
      Symbol(async_id_symbol): 13,
      Symbol(kHandle): [TCP],
      Symbol(lastWriteQueueSize): 0,
      Symbol(timeout): null,
      Symbol(kBuffer): null,
      Symbol(kBufferCb): null,
      Symbol(kBufferGen): null,
      Symbol(shapeMode): true,
      Symbol(kCapture): false,
      Symbol(kSetNoDelay): true,
      Symbol(kSetKeepAlive): false,
      Symbol(kSetKeepAliveInitialDelay): 0,
      Symbol(kBytesRead): 0,
      Symbol(kBytesWritten): 0
    },
    _consuming: true,
    _dumped: false,
    res: [Circular *1],
    next: [Function: next],
    baseUrl: '/login',
    originalUrl: '/login/debug',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/debug',
      path: '/debug',
      href: '/debug',
      _raw: '/debug'
    },
    params: [Object: null prototype] {},
    body: { email: 'ft@m.local', password: 'saltypass' },
    length: undefined,
    _eventsCount: 0,
    route: Route {
      path: '/debug',
      stack: [Array],
      methods: [Object: null prototype]
    },
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kHeaders): {
      host: 'api.amelieroussin.ca',
      'x-real-ip': '172.18.0.1',
      'x-forwarded-for': '172.18.0.1',
      'x-forwarded-proto': 'https',
      connection: 'close',
      'content-length': '50',
      'content-type': 'application/json',
      'user-agent': 'insomnium/0.2.3-a',
      accept: 'application/json'
    },
    Symbol(kHeadersCount): 18,
    Symbol(kTrailers): null,
    Symbol(kTrailersCount): 0
  },
  _sent100: false,
  _expect_continue: false,
  _maxRequestsPerSocket: 0,
  locals: [Object: null prototype] {},
  formatView: [Function (anonymous)],
  Symbol(shapeMode): false,
  Symbol(kCapture): false,
  Symbol(kBytesWritten): 0,
  Symbol(kNeedDrain): false,
  Symbol(corked): 0,
  Symbol(kChunkedBuffer): [],
  Symbol(kChunkedLength): 0,
  Symbol(kSocket): <ref *2> Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _closeAfterHandlingError: false,
    _events: {
      close: [Array],
      error: [Function: socketOnError],
      prefinish: undefined,
      finish: undefined,
      drain: [Function: bound socketOnDrain],
      data: [Function: bound socketOnData],
      end: [Array],
      readable: undefined,
      timeout: [Function: socketOnTimeout],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _readableState: ReadableState {
      highWaterMark: 65536,
      buffer: [],
      bufferIndex: 0,
      length: 0,
      pipes: [],
      awaitDrainWriters: null,
      Symbol(kState): 193997060
    },
    _writableState: WritableState {
      highWaterMark: 65536,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17564420,
      Symbol(kBufferedValue): null
    },
    allowHalfOpen: true,
    _maxListeners: undefined,
    _eventsCount: 8,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 65536,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 9,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30347,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 11,
        Symbol(triggerId): 10,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    _server: Server {
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      requestTimeout: 300000,
      headersTimeout: 60000,
      keepAliveTimeout: 5000,
      connectionsCheckingInterval: 30000,
      requireHostHeader: true,
      joinDuplicateHeaders: undefined,
      rejectNonStandardBodyWrites: false,
      _events: [Object: null prototype],
      _eventsCount: 4,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      _listeningId: 2,
      allowHalfOpen: true,
      pauseOnConnect: false,
      noDelay: true,
      keepAlive: false,
      keepAliveInitialDelay: 0,
      highWaterMark: 65536,
      httpAllowHalfOpen: false,
      timeout: 0,
      maxHeadersCount: null,
      maxRequestsPerSocket: 0,
      _connectionKey: '4:0.0.0.0:3000',
      Symbol(IncomingMessage): [Function: IncomingMessage],
      Symbol(ServerResponse): [Function: ServerResponse],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(async_id_symbol): 9,
      Symbol(kUniqueHeaders): null,
      Symbol(http.server.connections): ConnectionsList {},
      Symbol(http.server.connectionsCheckingInterval): Timeout {
        _idleTimeout: 30000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30347,
        _onTimeout: [Function: bound checkConnections],
        _timerArgs: undefined,
        _repeat: 30000,
        _destroyed: false,
        Symbol(refed): false,
        Symbol(kHasPrimitive): false,
        Symbol(asyncId): 11,
        Symbol(triggerId): 10,
        Symbol(kAsyncContextFrame): undefined
      }
    },
    parser: HTTPParser {
      '0': null,
      '1': [Function: parserOnHeaders],
      '2': [Function: parserOnHeadersComplete],
      '3': [Function: parserOnBody],
      '4': [Function: parserOnMessageComplete],
      '5': [Function: bound onParserExecute],
      '6': [Function: bound onParserTimeout],
      _headers: [],
      _url: '',
      socket: [Circular *2],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      joinDuplicateHeaders: null,
      Symbol(resource_symbol): [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    setEncoding: [Function: socketSetEncoding],
    _paused: false,
    _httpMessage: [Circular *1],
    Symbol(async_id_symbol): 13,
    Symbol(kHandle): TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      Symbol(owner_symbol): [Circular *2]
    },
    Symbol(lastWriteQueueSize): 0,
    Symbol(timeout): null,
    Symbol(kBuffer): null,
    Symbol(kBufferCb): null,
    Symbol(kBufferGen): null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false,
    Symbol(kSetNoDelay): true,
    Symbol(kSetKeepAlive): false,
    Symbol(kSetKeepAliveInitialDelay): 0,
    Symbol(kBytesRead): 0,
    Symbol(kBytesWritten): 0
  },
  Symbol(kOutHeaders): [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    vary: [ 'Vary', 'Origin' ]
  },
  Symbol(errored): null,
  Symbol(kHighWaterMark): 65536,
  Symbol(kRejectNonStandardBodyWrites): false,
  Symbol(kUniqueHeaders): null
}
queryResult:  [
  {
    userUuid: '2f9050f8-4702-4347-b87d-c46c5b37f4ff',
    email: 'amelie.roussin@gmail.com',
    passHash: 'a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae3',
    firstName: 'Amélie',
    lastName: 'Roussin',
    loginStamp: 2025-06-02T17:52:42.217Z,
    token: 'bcf04c16-b798-4283-a9b0-c2ca16c53792'
  },
  {
    userUuid: 'e15536c4-c13a-447f-829e-29f4dd1ebc31',
    email: 'jeremy.fontaine@example.com',
    passHash: '24ca57e668e74836cb43ca5bfc9973346847eb725ef9a71a2d3074d486318d09',
    firstName: 'Jérémy',
    lastName: 'Fontaine',
    loginStamp: 2025-06-02T17:52:42.217Z,
    token: '3f55e456-5b02-4cd1-98d5-925b9f983f19'
  },
  {
    userUuid: '4e1b3406-205d-40d7-9c5a-b97176d007bd',
    email: 'albert.langlois@example.com',
    passHash: '3b15f9e8e6315a022120d76d41efaf98c9fb1dd8642acebd3e81c68c97320dc0',
    firstName: 'Albert',
    lastName: 'Langlois',
    loginStamp: 2025-06-02T17:52:42.217Z,
    token: '317fd7aa-63c1-4524-aaf9-fabcf0f30341'
  },
  {
    userUuid: '1b5c07a5-c6b2-459b-903f-32618c2b7669',
    email: 'ft@m.local',
    passHash: '8b359375ae0c567da9cb4e48130ad6d77b2c6739d9ae1297f16d7dcc485e0340',
    firstName: 'f',
    lastName: 't',
    loginStamp: 2025-06-02T17:52:42.237Z,
    token: 'dad83fa8-8124-4d68-8c57-db66b65c5a7b'
  },
  {
    userUuid: '93822fea-e33d-426c-9a1c-f757001cba68',
    email: 'foobar@notmail.com',
    passHash: '48fda102553200a8a441fce472c12a9d71ee428cef505034cf7dfcccef46d96d',
    firstName: 'foo',
    lastName: 'bar',
    loginStamp: 2025-06-02T17:52:42.237Z,
    token: '6d39bf5b-dec5-47c0-b28a-f45e4c23afb2'
  },
  {
    userUuid: 'c3c77cef-1b64-4ace-ae4a-7c130c1eab02',
    email: 'tamere@notmail.com',
    passHash: '023999ef1f0b728121c0dbc237a7d34b73f8b99be47cc571280d789a66d131fb',
    firstName: 'ta',
    lastName: 'mere',
    loginStamp: 2025-06-02T17:52:42.237Z,
    token: 'e918ef1e-93d9-4d4c-ba7e-d9771f0b1474'
  },
  {
    userUuid: 'fe3d8644-fe4a-4524-9355-d1da76d78148',
    email: 'andreprof@notmail.com',
    passHash: '666c9bd68c715a1760250774336a0980b23a0addce34118a710c206966512ba1',
    firstName: 'andre',
    lastName: 'prof',
    loginStamp: 2025-06-02T17:52:42.237Z,
    token: '1db07979-156e-4c6e-91fd-f261559ec1ce'
  }
]
params: [Object: null prototype] {},
  body: { email: 'ft@m.local', password: 'saltypass' },
  length: undefined,
  _eventsCount: 0,
  route: Route {
    path: '/debug',
    stack: [ [Layer] ],
    methods: [Object: null prototype] { post: true }